---
title: "STAT 331 Portfolio"
author: "Addie Weaver"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1 #Lab 2 Q1

surveys <- read_csv(here::here("Week 2", "surveys.csv"))

```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2 #Lab 4 Q0

childcare_costs <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/childcare_costs.csv')

counties <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/counties.csv')

tax_rev <- read_csv('https://atheobold.github.io/groupworthy-data-science/labs/instructions/data/ca_tax_revenue.csv')

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx


#Need this in the future

```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1

#Lab 4 Question 7

recreate_plot <- ca_childcare |>
  select(region, county_name, study_year, mc_infant, mc_toddler, mc_preschool) |>
  filter(study_year >= 2008, study_year <= 2018) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_price"
  ) |>
  mutate(age_group = fct_collapse(age_group,
                                  "Infant" = "mc_infant",
                                  "Toddler" = "mc_toddler",
                                  "Preschool"= "mc_preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"),
    region = fct_reorder2(region, study_year, median_price, .desc = TRUE))
  

```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2
#Lab 3 Question 5 Modified for removing specific columns
teacher_evals_clean <- evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  select(-c(stud_grade_avg, stud_grade_std, stud_grade_var_coef, percent_failed, stud_grade_avg_cur, stud_grade_std_cur, stud_grade_var_coef_cur, class_duration, weekday, time_of_day, SET_score_1sem, maximum_score)) |>
  mutate(teacher_id = as.character(teacher_id))

```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3

#Lab 4 Question 7 (starts_with() for selecting cols for pivot_longer)
recreate_plot <- ca_childcare |>
  select(region, county_name, study_year, mc_infant, mc_toddler, mc_preschool) |>
  filter(study_year >= 2008, study_year <= 2018) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_price"
  ) |>
  mutate(age_group = fct_collapse(age_group,
                                  "Infant" = "mc_infant",
                                  "Toddler" = "mc_toddler",
                                  "Preschool"= "mc_preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"),
    region = fct_reorder2(region, study_year, median_price, .desc = TRUE))
  


```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1

# Lab 4 Question 5
region_median_income <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = study_year,
    values_from = median_income) |>
  arrange(desc(`2018`)) |>
  rename(Median_Income_2008 = `2008`,
         Median_Income_2018 = `2018`)

```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-1

#Lab 3 Question 10

teacher_evals_clean |> 
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarise(numOfCourses = n_distinct(course_id), 
            avg_for_all = mean(SET_score_avg),
            .groups = "drop")|>
  filter(numOfCourses >= 5) |>
  mutate(typemaxmin = case_when(
    avg_for_all == max(avg_for_all) ~ "Highest",
    avg_for_all == min(avg_for_all) ~ "Lowest")) |>
  filter(!is.na(typemaxmin))
```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character

#Lab 5
first_witness_interview <- interview |> # from this we got the persons name, address, id, etc as well as interview transcript
  inner_join(person, by = c("person_id" = "id")) |>
  filter(address_street_name == "Northwestern Dr",
         address_number == max(address_number)) |>
  select(name, transcript) |>
  mutate(result = str_c(name, ": ", transcript)) |>
  pull(result) # found the interview with the person who was a witness (two witnesses)
  
first_witness_interview

```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

#Lab 5
second_witness_interview <- interview |>
  inner_join(person, by = c("person_id" = "id"))|>
  filter(str_detect(name, "Annabel"),
                    address_street_name == "Franklin Ave")|>
  select(name, transcript) |>
  mutate(result = str_c(name, ": ", transcript)) |>
  pull(result) #found 2nd witness's interview and read its description

second_witness_interview
  

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date 

#Lab 5 Modified to include lubridate functions

who_hired <- person |>
  inner_join(drivers_license, by = c("license_id" = "id")) |>
  inner_join(facebook_event_checkin, by = c("id" = "person_id")) |> #based on jeremy's testimony, searched for the hirer.
  mutate(date = ymd(date))|>
  filter(
    hair_color == "red",
    gender == "female",
    car_make == "Tesla",
    car_model == "Model S",
    event_name == "SQL Symphony Concert",
    year(date) == 2018, month(date) == 12
  )
who_hired
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1
#Lab 3 Question 10

teacher_evals_clean |> 
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarise(numOfCourses = n_distinct(course_id), 
            avg_for_all = mean(SET_score_avg),
            .groups = "drop")|>
  filter(numOfCourses >= 5) |>
  mutate(typemaxmin = case_when(
    avg_for_all == max(avg_for_all) ~ "Highest",
    avg_for_all == min(avg_for_all) ~ "Lowest")) |>
  filter(!is.na(typemaxmin))
```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2

#Challenge 3
teacher_evals_compare <- teacher_evals |>
  filter(question_no == 903 ) |>
  mutate(set_level = if_else(SET_score_avg >= 4, "excellent", "standard"), 
         sen_level = case_when(
      seniority <= 4 ~ "junior",
      seniority <= 8 ~ "senior",
      seniority > 8  ~ "very senior")) |>
  select(course_id, set_level, sen_level)

```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1

#Lab 4 Question 4

ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County"),
         region = fct_collapse(county_name,
                      "Superior California" = superior_counties,
                      "North Coast" = north_coast_counties,
                      "San Francisco Bay Area" = san_fran_counties,
                      "Northern San Joaquin" = n_san_joaquin_counties,
                      "Central Coast" = central_coast_counties,
                      "Southern San Joaquin Valley" = s_san_joaquin_counties,
                      "Inland Empire" = inland_counties,
                      "Los Angeles County" = la_county,
                      "Orange County" = orange_county,
                      "San Diego and Imperial" = san_diego_imperial_counties ))

```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2

#Lab 4 Question 7

recreate_plot <- ca_childcare |>
  select(region, county_name, study_year, mc_infant, mc_toddler, mc_preschool) |>
  filter(study_year >= 2008, study_year <= 2018) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_price"
  ) |>
  mutate(age_group = fct_collapse(age_group,
                                  "Infant" = "mc_infant",
                                  "Toddler" = "mc_toddler",
                                  "Preschool"= "mc_preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"),
    region = fct_reorder2(region, study_year, median_price, .desc = TRUE))

```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string
 # Lab 5
second_witness_interview <- interview |>
  inner_join(person, by = c("person_id" = "id"))|>
  filter(str_detect(name, "Annabel"),
                    address_street_name == "Franklin Ave")|>
  select(name, transcript) |>
  mutate(result = str_c(name, ": ", transcript)) |>
  pull(result) #found 2nd witness's interview and read its description

second_witness_interview
  
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

#Lab 5 Modified to include lubridate functions

who_hired <- person |>
  inner_join(drivers_license, by = c("license_id" = "id")) |>
  inner_join(facebook_event_checkin, by = c("id" = "person_id")) |> #based on jeremy's testimony, searched for the hirer.
  mutate(date = ymd(date))|>
  filter(
    hair_color == "red",
    gender == "female",
    car_make == "Tesla",
    car_model == "Model S",
    event_name == "SQL Symphony Concert",
    year(date) == 2018, month(date) == 12
  )
who_hired

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1
#| 
#Lab 3 Question 3
ca_childcare <- ca_childcare |>
  left_join(tax_rev, by = c("county_name" = "entity_name", "study_year" = "year"))

```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right
#Lab 3 Question 3 Modified for a right join
ca_childcare <- tax_rev |>
  right_join(ca_childcare, by = c("entity_name" = "county_name", "year" = "study_year"))
```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

#Lab 4 Question 2
ca_childcare <- childcare_costs |> 
  left_join(counties, by = "county_fips_code") |>
  filter(state_name == "California")


```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1

#Lab 5
first_witness_interview <- interview |> # from this we got the persons name, address, id, etc as well as interview transcript
  inner_join(person, by = c("person_id" = "id")) |>
  filter(address_street_name == "Northwestern Dr",
         address_number == max(address_number)) |>
  select(name, transcript) |>
  mutate(result = str_c(name, ": ", transcript)) |>
  pull(result) # found the interview with the person who was a witness (two witnesses)
  
first_witness_interview
```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2
#Lab 5
suspects <- get_fit_now_member |>
  rename(member_id = id, member_name = name) |>
  inner_join(get_fit_now_check_in, by = c("member_id" = "membership_id")) |>
  inner_join(person, by = c("person_id" = "id")) |>
  inner_join(drivers_license, by = c("license_id" = "id")) |> #had to get all the speific data to filter through all the data tables
  filter(
    membership_status == "gold",
    str_starts(member_id, "48Z"),
    check_in_date == "20180109",
    str_detect(plate_number, "H42W")
  ) |>
  pull(member_name) #searched for suspects using both of the witnesses testimony with filter
suspects

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

#Lab 4 Question 7 (without ggplot for space)
recreate_plot <- ca_childcare |>
  select(region, county_name, study_year, mc_infant, mc_toddler, mc_preschool) |>
  filter(study_year >= 2008, study_year <= 2018) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_price"
  ) |>
  mutate(age_group = fct_collapse(age_group,
                                  "Infant" = "mc_infant",
                                  "Toddler" = "mc_toddler",
                                  "Preschool"= "mc_preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"),
    region = fct_reorder2(region, study_year, median_price, .desc = TRUE))
  

```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

#Lab 4 Question 5

region_median_income <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = study_year,
    values_from = median_income) |>
  arrange(desc(`2018`)) |>
  rename(Median_Income_2008 = `2008`,
         Median_Income_2018 = `2018`)

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Lab 2
-   lab 3
-   Lab 4
-   Lab 5
-   Challenge 4
-   Among others

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1 

# Lab 2 Q8 - Q16

ggplot(data = surveys,
  mapping = aes(x=weight, y= species)) +
  geom_jitter(color = "steelblue", alpha = 0.3) +
  geom_boxplot(outliers = FALSE) +
  labs(x= "Weight(g)", y= "Species", title = "The Relationship between Rodent Species and Weight") +
  theme( plot.title = element_text(size = 18),axis.title.x = element_text(size = 16), axis.title.y = element_text(size = 16), panel.grid.minor = element_blank())

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

#Lab 4 Question 5 Modified to not save the variable

ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = study_year,
              values_from = median_income) |>
  arrange(desc(`2018`)) |>
  rename(Median_Income_2008 = `2008`,
         Median_Income_2018 = `2018`)

```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example
#Lab 4 Question 5
ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = study_year,
              values_from = median_income) |>
  arrange(desc(`2018`)) |>
  rename(Median_Income_2008 = `2008`,
         Median_Income_2018 = `2018`)

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num
#Lab 4 Question 8
regression_plot <- ca_childcare |>
  filter(study_year >= 2008, study_year <= 2018) |>
  ggplot(aes(x = mhi_2018, y = mc_infant)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Median Income and Infant Childcare Prices have Positive Relationship",
       x = "Median Household Income ($)",
       y = NULL,
       subtitle = "Median Weekly Prices for Infant Center-Based Childcare ($)")
regression_plot

```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

#Challenge 4
ggplot(data = summary_table, aes(x = `Age_Group`, y = `Median_Price`, fill = `Care_Type`)) +
geom_col(position = "dodge", width = 0.8) +
geom_text(
    aes(label = paste0("$", Median_Price)),
    position = position_dodge(width = 0.8), vjust = -0.4, size = 2.5) + # I googles moving the labels on top of columns
scale_fill_manual(values = c(
  "Center-based" = "#53868B", # https://r-charts.com/colors for colors
  "Family-based" = "#66CDAA"
)) +
  facet_wrap(~ study_year, nrow = 1) +
labs(title = "Median Weekly Childcare Costs More for Infants & Center-Based & \nHas Increased Throughout A Decade",
     x = "Age Group",
     y =NULL,
     subtitle = "Median Weekly Full Time Price ($)",
     fill = "Care Type") 

```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

#lab 4 Question 7

recreate_plot <- ca_childcare |>
  select(region, county_name, study_year, mc_infant, mc_toddler, mc_preschool) |>
  filter(study_year >= 2008, study_year <= 2018) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_price"
  ) |>
  mutate(age_group = fct_collapse(age_group,
                                  "Infant" = "mc_infant",
                                  "Toddler" = "mc_toddler",
                                  "Preschool"= "mc_preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"),
    region = fct_reorder2(region, study_year, median_price, .desc = TRUE))
  

ggplot(recreate_plot, aes(x = study_year, y = median_price, color = region)) +
  geom_point(alpha = 0.4) +
  geom_smooth() +
  scale_color_manual(values = colors_plot) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) + ## I googles how to increment by 2 years using scale_x_continuous
  scale_y_continuous(breaks = seq(0, 500, by = 100)) +
  facet_wrap(~ age_group, axes = "all_x") + # found some cool things in the facet_wrap documentation
  labs( title = "Weekly Median Price for Center-Based Childcare ($)",
        x = "Study Year",
        y= NULL ,
        color = "California Region") +
  theme(aspect.ratio = 1,
        legend.position = "right",
        axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 7))

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1
#Lab 4 Question 7 (cut down for space)
ggplot(recreate_plot, aes(x = study_year, y = median_price, color = region)) +
  geom_point(alpha = 0.4) +
  geom_smooth() +
  scale_color_manual(values = colors_plot) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) + ## I googles how to increment by 2 years using scale_x_continuous
  scale_y_continuous(breaks = seq(0, 500, by = 100)) +
  facet_wrap(~ age_group, axes = "all_x") + # found some cool things in the facet_wrap documentation
  labs( title = "Weekly Median Price for Center-Based Childcare ($)",
        x = "Study Year",
        y= NULL ,
        color = "California Region") +
  theme(aspect.ratio = 1,
        legend.position = "right",
        axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 7))

```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2

#Lab 4 Question 7
colors_plot <- colorRampPalette(brewer.pal(7, "Accent"))(10)
ggplot(recreate_plot, aes(x = study_year, y = median_price, color = region)) +
  geom_point(alpha = 0.4) +
  geom_smooth() +
  scale_color_manual(values = colors_plot) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) + ## I googles how to increment by 2 years using scale_x_continuous
  scale_y_continuous(breaks = seq(0, 500, by = 100)) +
  facet_wrap(~ age_group, axes = "all_x") + # found some cool things in the facet_wrap documentation
  labs( title = "Weekly Median Price for Center-Based Childcare ($)",
        x = "Study Year",
        y= NULL ,
        color = "California Region") +
  theme(aspect.ratio = 1,
        legend.position = "right",
        axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 7))


```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3

#Challenge 4
ggplot(data = summary_table, aes(x = `Age_Group`, y = `Median_Price`, fill = `Care_Type`)) +
geom_col(position = "dodge", width = 0.8) +
geom_text(
    aes(label = paste0("$", Median_Price)),
    position = position_dodge(width = 0.8), vjust = -0.4, size = 2.5) + # I googles moving the labels on top of columns
scale_fill_manual(values = c(
  "Center-based" = "#53868B", # https://r-charts.com/colors for colors
  "Family-based" = "#66CDAA"
)) +
  facet_wrap(~ study_year, nrow = 1) +
labs(title = "Median Weekly Childcare Costs More for Infants & Center-Based & \nHas Increased Throughout A Decade",
     x = "Age Group",
     y =NULL,
     subtitle = "Median Weekly Full Time Price ($)",
     fill = "Care Type") 


```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4

# Challenge 2 Spicy Option
ggplot(data = surveys,
  mapping = aes(x=weight, y= species)) +
  geom_jitter(color = "steelblue", alpha = 0.3) +
  geom_boxplot(outliers = FALSE) +
  labs(x= "Weight(g)", y= "Species", title = "The Relationship between Rodent Species and Weight") +
  theme( plot.title = element_text(size = 14),axis.title.x = element_text(size = 12), axis.title.y = element_text(size = 12), panel.grid.minor = element_blank())


```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5

#Lab 4 Question 7

colors_plot <- colorRampPalette(brewer.pal(7, "Accent"))(10)

recreate_plot <- ca_childcare |>
  select(region, county_name, study_year, mc_infant, mc_toddler, mc_preschool) |>
  filter(study_year >= 2008, study_year <= 2018) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_price"
  ) |>
  mutate(age_group = fct_collapse(age_group,
                                  "Infant" = "mc_infant",
                                  "Toddler" = "mc_toddler",
                                  "Preschool"= "mc_preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"),
    region = fct_reorder2(region, study_year, median_price, .desc = TRUE))

ggplot(recreate_plot, aes(x = study_year, y = median_price, color = region)) +
  geom_point(alpha = 0.4) +
  geom_smooth() +
  scale_color_manual(values = colors_plot) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) + ## I googles how to increment by 2 years using scale_x_continuous
  scale_y_continuous(breaks = seq(0, 500, by = 100)) +
  facet_wrap(~ age_group, axes = "all_x") + # found some cool things in the facet_wrap documentation
  labs( title = "Weekly Median Price for Center-Based Childcare ($)",
        x = "Study Year",
        y= NULL ,
        color = "California Region") +
  theme(aspect.ratio = 1,
        legend.position = "right",
        axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 7))

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1

```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2

```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

#Challenge 4
ggplot(data = summary_table, aes(x = `Age_Group`, y = `Median_Price`, fill = `Care_Type`)) +
geom_col(position = "dodge", width = 0.8) +
geom_text(
    aes(label = paste0("$", Median_Price)),
    position = position_dodge(width = 0.8), vjust = -0.4, size = 2.5) + # I googles moving the labels on top of columns
scale_fill_manual(values = c(
  "Center-based" = "#53868B", # https://r-charts.com/colors for colors
  "Family-based" = "#66CDAA"
)) +
  facet_wrap(~ study_year, nrow = 1) +
labs(title = "Median Weekly Childcare Costs More for Infants & Center-Based & \nHas Increased Throughout A Decade",
     x = "Age Group",
     y =NULL,
     subtitle = "Median Weekly Full Time Price ($)",
     fill = "Care Type") 

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

#Lab 4 Question 5

region_median_income <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = study_year,
    values_from = median_income) |>
  arrange(desc(`2018`)) |>
  rename(Median_Income_2008 = `2008`,
         Median_Income_2018 = `2018`)

```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1

#Challenge 4

summary_table<- ca_childcare |>
  filter(study_year %in% c(2008,2018)) |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool, mfcc_infant, mfcc_toddler, mfcc_preschool),
    names_to = c("Care_Type", "Age_Group"),
    names_sep = "_", 
    values_to = "Median_Price") |>
  mutate(
    Care_Type = case_when(Care_Type == "mc" ~ "Center-based",
                          Care_Type == "mfcc" ~ "Family-based"),
    Age_Group = case_when(Age_Group == "infant" ~ "Infant",
                          Age_Group == "toddler" ~ "Toddler",
                          Age_Group == "preschool" ~ "Preschool"),
    Age_group = fct_relevel(Age_Group, "Infant", "Toddler", "Preschool")) |>
  group_by(Age_Group, study_year, Care_Type) |>
  summarise(Median_Price = median(Median_Price), .groups = "drop") 

#used https://tidyr.tidyverse.org/reference/pivot_longer.html documentation for help

options(pillar.sigfig = 5) # I looked up "how to have tibble show more than 4 numeric digits" on google = first result
print(summary_table, n = Inf, width = Inf)

```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

```

-   using `across()`

```{r}
#| label: pe-1-across

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2
#Lab 4 Question 7 modified for pipeline to ggplot()

ca_childcare |>
  select(region, county_name, study_year, mc_infant, mc_toddler, mc_preschool) |>
  filter(study_year >= 2008, study_year <= 2018) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_price"
  ) |>
  mutate(age_group = fct_collapse(age_group,
                                  "Infant" = "mc_infant",
                                  "Toddler" = "mc_toddler",
                                  "Preschool"= "mc_preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"),
    region = fct_reorder2(region, study_year, median_price, .desc = TRUE)) |>
  
  ggplot(recreate_plot, aes(x = study_year, y = median_price, color = region)) +
  geom_point(alpha = 0.4) +
  geom_smooth() +
  scale_color_manual(values = colors_plot) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) + ## I googles how to increment by 2 years using scale_x_continuous
  scale_y_continuous(breaks = seq(0, 500, by = 100)) +
  facet_wrap(~ age_group, axes = "all_x") + # found some cool things in the facet_wrap documentation
  labs( title = "Weekly Median Price for Center-Based Childcare ($)",
        x = "Study Year",
        y= NULL ,
        color = "California Region") +
  theme(aspect.ratio = 1,
        legend.position = "right",
        axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 7))

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

#Lab 2 Q17

summary(aov(weight ~ species, data = surveys))

```

-   Example 2

```{r}
#| label: dsm-2-2
# Challenge 3 Q3
chisq.test(teacher_evals_compare$set_level, teacher_evals_compare$sen_level)
```

-   Example 3

```{r}
#| label: dsm-2-3


# Lab 1 Question 9
t.test(len ~ supp, data = ToothGrowth,
       alternative = "two.sided",
       var.equal = FALSE,
       conf.level = 0.95)

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
