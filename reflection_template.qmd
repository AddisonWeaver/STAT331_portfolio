---
title: "STAT 331 Portfolio"
author: "Addie Weaver"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an B+.


[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1 #Lab 2 Q1

surveys <- read_csv(here::here("Week 2", "surveys.csv"))

```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2 #Lab 4 Q0

childcare_costs <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/childcare_costs.csv')

counties <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/counties.csv')

tax_rev <- read_csv('https://atheobold.github.io/groupworthy-data-science/labs/instructions/data/ca_tax_revenue.csv')

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx


#Need this in the future

```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1

#Lab 4 Question 7

recreate_plot <- ca_childcare |>
  select(region, county_name, study_year, mc_infant, mc_toddler, mc_preschool) |>
  filter(study_year >= 2008, study_year <= 2018) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_price"
  ) |>
  mutate(age_group = fct_collapse(age_group,
                                  "Infant" = "mc_infant",
                                  "Toddler" = "mc_toddler",
                                  "Preschool"= "mc_preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"),
    region = fct_reorder2(region, study_year, median_price, .desc = TRUE))
  

```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2
#Lab 3 Question 5 Modified for removing specific columns
teacher_evals_clean <- evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  select(-c(stud_grade_avg, stud_grade_std, stud_grade_var_coef, percent_failed, stud_grade_avg_cur, stud_grade_std_cur, stud_grade_var_coef_cur, class_duration, weekday, time_of_day, SET_score_1sem, maximum_score)) |>
  mutate(teacher_id = as.character(teacher_id))

```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3

#Lab 4 Question 7 (starts_with() for selecting cols for pivot_longer)
recreate_plot <- ca_childcare |>
  select(region, county_name, study_year, mc_infant, mc_toddler, mc_preschool) |>
  filter(study_year >= 2008, study_year <= 2018) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_price"
  ) |>
  mutate(age_group = fct_collapse(age_group,
                                  "Infant" = "mc_infant",
                                  "Toddler" = "mc_toddler",
                                  "Preschool"= "mc_preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"),
    region = fct_reorder2(region, study_year, median_price, .desc = TRUE))
  


```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1

# Lab 4 Question 5
region_median_income <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = study_year,
    values_from = median_income) |>
  arrange(desc(`2018`)) |>
  rename(Median_Income_2008 = `2008`,
         Median_Income_2018 = `2018`)

```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-2

#Lab 3 Question 10

teacher_evals_clean |> 
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarise(numOfCourses = n_distinct(course_id), 
            avg_for_all = mean(SET_score_avg),
            .groups = "drop")|>
  filter(numOfCourses >= 5) |>
  mutate(typemaxmin = case_when(
    avg_for_all == max(avg_for_all) ~ "Highest",
    avg_for_all == min(avg_for_all) ~ "Lowest")) |>
  filter(!is.na(typemaxmin))
```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character

#Lab 5
first_witness_interview <- interview |> # from this we got the persons name, address, id, etc as well as interview transcript
  inner_join(person, by = c("person_id" = "id")) |>
  filter(address_street_name == "Northwestern Dr",
         address_number == max(address_number)) |>
  select(name, transcript) |>
  mutate(result = str_c(name, ": ", transcript)) |>
  pull(result) # found the interview with the person who was a witness (two witnesses)
  
first_witness_interview

```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

#Lab 5
second_witness_interview <- interview |>
  inner_join(person, by = c("person_id" = "id"))|>
  filter(str_detect(name, "Annabel"),
                    address_street_name == "Franklin Ave")|>
  select(name, transcript) |>
  mutate(result = str_c(name, ": ", transcript)) |>
  pull(result) #found 2nd witness's interview and read its description

second_witness_interview
  

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date 

#Lab 5 Modified to include lubridate functions

who_hired <- person |>
  inner_join(drivers_license, by = c("license_id" = "id")) |>
  inner_join(facebook_event_checkin, by = c("id" = "person_id")) |> #based on jeremy's testimony, searched for the hirer.
  mutate(date = ymd(date))|>
  filter(
    hair_color == "red",
    gender == "female",
    car_make == "Tesla",
    car_model == "Model S",
    event_name == "SQL Symphony Concert",
    year(date) == 2018, month(date) == 12
  )
who_hired
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1
#Lab 3 Question 10

teacher_evals_clean |> 
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarise(numOfCourses = n_distinct(course_id), 
            avg_for_all = mean(SET_score_avg),
            .groups = "drop")|>
  filter(numOfCourses >= 5) |>
  mutate(typemaxmin = case_when(
    avg_for_all == max(avg_for_all) ~ "Highest",
    avg_for_all == min(avg_for_all) ~ "Lowest")) |>
  filter(!is.na(typemaxmin))
```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2

#Challenge 3
teacher_evals_compare <- teacher_evals |>
  filter(question_no == 903 ) |>
  mutate(set_level = if_else(SET_score_avg >= 4, "excellent", "standard"), 
         sen_level = case_when(
      seniority <= 4 ~ "junior",
      seniority <= 8 ~ "senior",
      seniority > 8  ~ "very senior")) |>
  select(course_id, set_level, sen_level)

```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1

#Lab 4 Question 4

ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County"),
         region = fct_collapse(county_name,
                      "Superior California" = superior_counties,
                      "North Coast" = north_coast_counties,
                      "San Francisco Bay Area" = san_fran_counties,
                      "Northern San Joaquin" = n_san_joaquin_counties,
                      "Central Coast" = central_coast_counties,
                      "Southern San Joaquin Valley" = s_san_joaquin_counties,
                      "Inland Empire" = inland_counties,
                      "Los Angeles County" = la_county,
                      "Orange County" = orange_county,
                      "San Diego and Imperial" = san_diego_imperial_counties ))

```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2

#Lab 4 Question 7

recreate_plot <- ca_childcare |>
  select(region, county_name, study_year, mc_infant, mc_toddler, mc_preschool) |>
  filter(study_year >= 2008, study_year <= 2018) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_price"
  ) |>
  mutate(age_group = fct_collapse(age_group,
                                  "Infant" = "mc_infant",
                                  "Toddler" = "mc_toddler",
                                  "Preschool"= "mc_preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"),
    region = fct_reorder2(region, study_year, median_price, .desc = TRUE))

```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string
 # Lab 5
second_witness_interview <- interview |>
  inner_join(person, by = c("person_id" = "id"))|>
  filter(str_detect(name, "Annabel"),
                    address_street_name == "Franklin Ave")|>
  select(name, transcript) |>
  mutate(result = str_c(name, ": ", transcript)) |>
  pull(result) #found 2nd witness's interview and read its description

second_witness_interview
  
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

#Lab 5 Modified to include lubridate functions

who_hired <- person |>
  inner_join(drivers_license, by = c("license_id" = "id")) |>
  inner_join(facebook_event_checkin, by = c("id" = "person_id")) |> #based on jeremy's testimony, searched for the hirer.
  mutate(date = ymd(date))|>
  filter(
    hair_color == "red",
    gender == "female",
    car_make == "Tesla",
    car_model == "Model S",
    event_name == "SQL Symphony Concert",
    year(date) == 2018, month(date) == 12
  )
who_hired

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1
#| 
#Lab 3 Question 3
ca_childcare <- ca_childcare |>
  left_join(tax_rev, by = c("county_name" = "entity_name", "study_year" = "year"))

```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right
#Lab 3 Question 3 Modified for a right join
ca_childcare <- tax_rev |>
  right_join(ca_childcare, by = c("entity_name" = "county_name", "year" = "study_year"))
```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

#Lab 4 Question 2
ca_childcare <- childcare_costs |> 
  left_join(counties, by = "county_fips_code") |>
  filter(state_name == "California")


```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1

#Lab 5
first_witness_interview <- interview |> # from this we got the persons name, address, id, etc as well as interview transcript
  inner_join(person, by = c("person_id" = "id")) |>
  filter(address_street_name == "Northwestern Dr",
         address_number == max(address_number)) |>
  select(name, transcript) |>
  mutate(result = str_c(name, ": ", transcript)) |>
  pull(result) # found the interview with the person who was a witness (two witnesses)
  
first_witness_interview
```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2
#Lab 5
suspects <- get_fit_now_member |>
  rename(member_id = id, member_name = name) |>
  inner_join(get_fit_now_check_in, by = c("member_id" = "membership_id")) |>
  inner_join(person, by = c("person_id" = "id")) |>
  inner_join(drivers_license, by = c("license_id" = "id")) |> #had to get all the speific data to filter through all the data tables
  filter(
    membership_status == "gold",
    str_starts(member_id, "48Z"),
    check_in_date == "20180109",
    str_detect(plate_number, "H42W")
  ) |>
  pull(member_name) #searched for suspects using both of the witnesses testimony with filter
suspects

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi
#Using Lab 5 data, Made Some Code for Semi-join for filtering for gym members who checked in on a specific date

get_fit_now_member |>
  semi_join(
    get_fit_now_check_in |> filter(check_in_date == "20180109"),
    by = c("id" = "membership_id")
  )


```

-   `anti_join()`

```{r}
#| label: wd-6-anti

#Lab 5 datasets to write code for anti-join to filter out people who didn't attend the SQL Symphony concert

person |>
  anti_join(
    facebook_event_checkin |> filter(event_name == "SQL Symphony Concert"),
    by = c("id" = "person_id")
  )

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

#Lab 4 Question 7 (without ggplot for space)
recreate_plot <- ca_childcare |>
  select(region, county_name, study_year, mc_infant, mc_toddler, mc_preschool) |>
  filter(study_year >= 2008, study_year <= 2018) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_price"
  ) |>
  mutate(age_group = fct_collapse(age_group,
                                  "Infant" = "mc_infant",
                                  "Toddler" = "mc_toddler",
                                  "Preschool"= "mc_preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"),
    region = fct_reorder2(region, study_year, median_price, .desc = TRUE))
  

```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

#Lab 4 Question 5

region_median_income <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = study_year,
    values_from = median_income) |>
  arrange(desc(`2018`)) |>
  rename(Median_Income_2008 = `2008`,
         Median_Income_2018 = `2018`)

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Lab 2
-   lab 3
-   Lab 4
-   Lab 5
-   Challenge 4

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1 

# Lab 2 Q8 - Q16

ggplot(data = surveys,
  mapping = aes(x=weight, y= species)) +
  geom_jitter(color = "steelblue", alpha = 0.3) +
  geom_boxplot(outliers = FALSE) +
  labs(x= "Weight(g)", y= "Species", title = "The Relationship between Rodent Species and Weight") +
  theme( plot.title = element_text(size = 18),axis.title.x = element_text(size = 16), axis.title.y = element_text(size = 16), panel.grid.minor = element_blank())

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

#Lab 4 Question 5 Modified to not save the variable

ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = study_year,
              values_from = median_income) |>
  arrange(desc(`2018`)) |>
  rename(Median_Income_2008 = `2008`,
         Median_Income_2018 = `2018`)

```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example
#Lab 4 Question 5
ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = study_year,
              values_from = median_income) |>
  arrange(desc(`2018`)) |>
  rename(Median_Income_2008 = `2008`,
         Median_Income_2018 = `2018`)

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num
#Lab 4 Question 8
regression_plot <- ca_childcare |>
  filter(study_year >= 2008, study_year <= 2018) |>
  ggplot(aes(x = mhi_2018, y = mc_infant)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Median Income and Infant Childcare Prices have Positive Relationship",
       x = "Median Household Income ($)",
       y = NULL,
       subtitle = "Median Weekly Prices for Infant Center-Based Childcare ($)")
regression_plot

```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

#Challenge 4
ggplot(data = summary_table, aes(x = `Age_Group`, y = `Median_Price`, fill = `Care_Type`)) +
geom_col(position = "dodge", width = 0.8) +
geom_text(
    aes(label = paste0("$", Median_Price)),
    position = position_dodge(width = 0.8), vjust = -0.4, size = 2.5) + # I googles moving the labels on top of columns
scale_fill_manual(values = c(
  "Center-based" = "#53868B", # https://r-charts.com/colors for colors
  "Family-based" = "#66CDAA"
)) +
  facet_wrap(~ study_year, nrow = 1) +
labs(title = "Median Weekly Childcare Costs More for Infants & Center-Based & \nHas Increased Throughout A Decade",
     x = "Age Group",
     y =NULL,
     subtitle = "Median Weekly Full Time Price ($)",
     fill = "Care Type") 

```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

#lab 4 Question 7

recreate_plot <- ca_childcare |>
  select(region, county_name, study_year, mc_infant, mc_toddler, mc_preschool) |>
  filter(study_year >= 2008, study_year <= 2018) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_price"
  ) |>
  mutate(age_group = fct_collapse(age_group,
                                  "Infant" = "mc_infant",
                                  "Toddler" = "mc_toddler",
                                  "Preschool"= "mc_preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"),
    region = fct_reorder2(region, study_year, median_price, .desc = TRUE))
  

ggplot(recreate_plot, aes(x = study_year, y = median_price, color = region)) +
  geom_point(alpha = 0.4) +
  geom_smooth() +
  scale_color_manual(values = colors_plot) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) + ## I googles how to increment by 2 years using scale_x_continuous
  scale_y_continuous(breaks = seq(0, 500, by = 100)) +
  facet_wrap(~ age_group, axes = "all_x") + # found some cool things in the facet_wrap documentation
  labs( title = "Weekly Median Price for Center-Based Childcare ($)",
        x = "Study Year",
        y= NULL ,
        color = "California Region") +
  theme(aspect.ratio = 1,
        legend.position = "right",
        axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 7))

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1
#Lab 4 Question 7 (cut down for space)
ggplot(recreate_plot, aes(x = study_year, y = median_price, color = region)) +
  geom_point(alpha = 0.4) +
  geom_smooth() +
  scale_color_manual(values = colors_plot) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) + ## I googles how to increment by 2 years using scale_x_continuous
  scale_y_continuous(breaks = seq(0, 500, by = 100)) +
  facet_wrap(~ age_group, axes = "all_x") + # found some cool things in the facet_wrap documentation
  labs( title = "Weekly Median Price for Center-Based Childcare ($)",
        x = "Study Year",
        y= NULL ,
        color = "California Region") +
  theme(aspect.ratio = 1,
        legend.position = "right",
        axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 7))

```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2

#Lab 4 Question 7
colors_plot <- colorRampPalette(brewer.pal(7, "Accent"))(10)
ggplot(recreate_plot, aes(x = study_year, y = median_price, color = region)) +
  geom_point(alpha = 0.4) +
  geom_smooth() +
  scale_color_manual(values = colors_plot) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) + ## I googles how to increment by 2 years using scale_x_continuous
  scale_y_continuous(breaks = seq(0, 500, by = 100)) +
  facet_wrap(~ age_group, axes = "all_x") + # found some cool things in the facet_wrap documentation
  labs( title = "Weekly Median Price for Center-Based Childcare ($)",
        x = "Study Year",
        y= NULL ,
        color = "California Region") +
  theme(aspect.ratio = 1,
        legend.position = "right",
        axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 7))


```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3

#Challenge 4
ggplot(data = summary_table, aes(x = `Age_Group`, y = `Median_Price`, fill = `Care_Type`)) +
geom_col(position = "dodge", width = 0.8) +
geom_text(
    aes(label = paste0("$", Median_Price)),
    position = position_dodge(width = 0.8), vjust = -0.4, size = 2.5) + # I googles moving the labels on top of columns
scale_fill_manual(values = c(
  "Center-based" = "#53868B", # https://r-charts.com/colors for colors
  "Family-based" = "#66CDAA"
)) +
  facet_wrap(~ study_year, nrow = 1) +
labs(title = "Median Weekly Childcare Costs More for Infants & Center-Based & \nHas Increased Throughout A Decade",
     x = "Age Group",
     y =NULL,
     subtitle = "Median Weekly Full Time Price ($)",
     fill = "Care Type") 


```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4

# Challenge 2 Spicy Option
ggplot(data = surveys,
  mapping = aes(x=weight, y= species)) +
  geom_jitter(color = "steelblue", alpha = 0.3) +
  geom_boxplot(outliers = FALSE) +
  labs(x= "Weight(g)", y= "Species", title = "The Relationship between Rodent Species and Weight") +
  theme( plot.title = element_text(size = 14),axis.title.x = element_text(size = 12), axis.title.y = element_text(size = 12), panel.grid.minor = element_blank())


```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5

#Lab 4 Question 7

colors_plot <- colorRampPalette(brewer.pal(7, "Accent"))(10)

recreate_plot <- ca_childcare |>
  select(region, county_name, study_year, mc_infant, mc_toddler, mc_preschool) |>
  filter(study_year >= 2008, study_year <= 2018) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_price"
  ) |>
  mutate(age_group = fct_collapse(age_group,
                                  "Infant" = "mc_infant",
                                  "Toddler" = "mc_toddler",
                                  "Preschool"= "mc_preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"),
    region = fct_reorder2(region, study_year, median_price, .desc = TRUE)) 

ggplot(recreate_plot, aes(x = study_year, y = median_price, color = region)) +
  geom_point(alpha = 0.4) +
  geom_smooth() +
  scale_color_manual(values = colors_plot) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) + ## I googles how to increment by 2 years using scale_x_continuous
  scale_y_continuous(breaks = seq(0, 500, by = 100)) +
  facet_wrap(~ age_group, axes = "all_x") + # found some cool things in the facet_wrap documentation
  labs( title = "Weekly Median Price for Center-Based Childcare ($)",
        x = "Study Year",
        y= NULL ,
        color = "California Region") +
  theme(aspect.ratio = 1,
        legend.position = "right",
        axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 7))

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1

#Lab 4 Question 7
colors_plot <- colorRampPalette(brewer.pal(7, "Accent"))(10)
ggplot(recreate_plot, aes(x = study_year, y = median_price, color = region)) +
  geom_point(alpha = 0.4) +
  geom_smooth() +
  scale_color_manual(values = colors_plot) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) + ## I googles how to increment by 2 years using scale_x_continuous
  scale_y_continuous(breaks = seq(0, 500, by = 100)) +
  facet_wrap(~ age_group, axes = "all_x") + # found some cool things in the facet_wrap documentation
  labs( title = "Weekly Median Price for Center-Based Childcare ($)",
        x = "Study Year",
        y= NULL ,
        color = "California Region") +
  theme(aspect.ratio = 1,
        legend.position = "right",
        axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 7))



```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2

#Challenge 2

ggplot(data = surveys,
  mapping = aes(x=weight, y= species)) +
  geom_jitter(color = "steelblue", alpha = 0.3) +
  geom_boxplot(outliers = FALSE) +
  labs(x= "Weight(g)", y= "Species", title = "The Relationship between Rodent Species and Weight") +
  theme( plot.title = element_text(size = 14),axis.title.x = element_text(size = 12), axis.title.y = element_text(size = 12), panel.grid.minor = element_blank())

```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

#Challenge 4
ggplot(data = summary_table, aes(x = `Age_Group`, y = `Median_Price`, fill = `Care_Type`)) +
geom_col(position = "dodge", width = 0.8) +
geom_text(
    aes(label = paste0("$", Median_Price)),
    position = position_dodge(width = 0.8), vjust = -0.4, size = 2.5) + # I googles moving the labels on top of columns
scale_fill_manual(values = c(
  "Center-based" = "#53868B", # https://r-charts.com/colors for colors
  "Family-based" = "#66CDAA"
)) +
  facet_wrap(~ study_year, nrow = 1) +
labs(title = "Median Weekly Childcare Costs More for Infants & Center-Based & \nHas Increased Throughout A Decade",
     x = "Age Group",
     y =NULL,
     subtitle = "Median Weekly Full Time Price ($)",
     fill = "Care Type") 

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

#Lab 3 Question 11
teacher_evals_clean |>
  filter(seniority == 1) |>
  group_by(teacher_id) |>
  summarise(avgfail = mean(percent_failed_cur),.groups = "drop") |>
  mutate(maxmin = case_when(
    avgfail == max(avgfail) ~ "Highest",
    avgfail == min(avgfail) ~ "Lowest"
  )) |>
  filter(!is.na(maxmin))
```

-   Example using `across()`

```{r}
#| label: dvs-4-across

#Lab 4 Question 6 Modifiied for across() all age groups center based

lowest_median_price <- ca_childcare |>
  filter(study_year == 2018) |>
  group_by(region) |>
  summarise(across(c(mc_infant, mc_toddler, mc_preschool),
                   ~ median (.x, na.rm = TRUE),
                   .names = "median{.col}"), 
            .groups = "drop") |>
  arrange(medianmc_infant) |>
  slice_min(medianmc_infant, n=1)

lowest_median_price

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

#Lab 4 Question 5

region_median_income <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = study_year,
    values_from = median_income) |>
  arrange(desc(`2018`)) |>
  rename(Median_Income_2008 = `2008`,
         Median_Income_2018 = `2018`)

```

-   Example 2

```{r}
#| label: dvs-5-2
#lab 3 Question 10
teacher_evals_clean |> 
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarise(numOfCourses = n_distinct(course_id), 
            avg_for_all = mean(SET_score_avg),
            .groups = "drop")|>
  filter(numOfCourses >= 5) |>
  mutate(typemaxmin = case_when(
    avg_for_all == max(avg_for_all) ~ "Highest",
    avg_for_all == min(avg_for_all) ~ "Lowest")) |>
  filter(!is.na(typemaxmin))

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1

#Challenge 4

summary_table<- ca_childcare |>
  filter(study_year %in% c(2008,2018)) |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool, mfcc_infant, mfcc_toddler, mfcc_preschool),
    names_to = c("Care_Type", "Age_Group"),
    names_sep = "_", 
    values_to = "Median_Price") |>
  mutate(
    Care_Type = case_when(Care_Type == "mc" ~ "Center-based",
                          Care_Type == "mfcc" ~ "Family-based"),
    Age_Group = case_when(Age_Group == "infant" ~ "Infant",
                          Age_Group == "toddler" ~ "Toddler",
                          Age_Group == "preschool" ~ "Preschool"),
    Age_group = fct_relevel(Age_Group, "Infant", "Toddler", "Preschool")) |>
  group_by(Age_Group, study_year, Care_Type) |>
  summarise(Median_Price = median(Median_Price), .groups = "drop") 

#used https://tidyr.tidyverse.org/reference/pivot_longer.html documentation for help

options(pillar.sigfig = 5) # I looked up "how to have tibble show more than 4 numeric digits" on google = first result
print(summary_table, n = Inf, width = Inf)

```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

#Lab 4 Question 5
region_median_income <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = study_year,
    values_from = median_income) |>
  arrange(desc(`2018`)) |>
  rename(Median_Income_2008 = `2008`,
         Median_Income_2018 = `2018`) 
region_median_income


```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

#Lab 4 Question 7

recreate_plot <- ca_childcare |>
  select(region, county_name, study_year, mc_infant, mc_toddler, mc_preschool) |>
  filter(study_year >= 2008, study_year <= 2018) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_price"
  ) |>
  mutate(age_group = fct_collapse(age_group,
                                  "Infant" = "mc_infant",
                                  "Toddler" = "mc_toddler",
                                  "Preschool"= "mc_preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"),
    region = fct_reorder2(region, study_year, median_price, .desc = TRUE))

```

-   using `across()`

```{r}
#| label: pe-1-across

#Lab 3 Question 7 Modified
unique_instructors |>
  summarise(across(c(academic_degree, seniority, sex),
                   ~ list(table(.x)),
                   .names = "{.col}_counts"))

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

#Lab 3 Question 7 Modified
unique_instructors |>
  summarise(across(c(academic_degree, seniority, sex),
                   ~ list(table(.x)),
                   .names = "{.col}_counts"))
```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

#Challenge 3 Revised for not superseded functions like label_percent()
ggplot(data = teacher_evals_compare, aes(x = sen_level, fill = set_level)) +
  geom_bar(position = "fill") +
  labs(
    title = "Evaluation of Teachers' Use Of Actvities",
    x = "Years of Experience",
    y = NULL,
    fill = "Evaluation Rating") +
  scale_y_continuous(labels = scales::label_percent()) +
  theme(legend.position = "top") +
  scale_fill_manual(values = c("excellent" = "#CC99FF", "standard" = "#C28E4F")) 


```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2
#Lab 4 Question 7 modified for pipeline to ggplot()

ca_childcare |>
  select(region, county_name, study_year, mc_infant, mc_toddler, mc_preschool) |>
  filter(study_year >= 2008, study_year <= 2018) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_price"
  ) |>
  mutate(age_group = fct_collapse(age_group,
                                  "Infant" = "mc_infant",
                                  "Toddler" = "mc_toddler",
                                  "Preschool"= "mc_preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"),
    region = fct_reorder2(region, study_year, median_price, .desc = TRUE)) |>
  
  ggplot(recreate_plot, aes(x = study_year, y = median_price, color = region)) +
  geom_point(alpha = 0.4) +
  geom_smooth() +
  scale_color_manual(values = colors_plot) +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) + ## I googles how to increment by 2 years using scale_x_continuous
  scale_y_continuous(breaks = seq(0, 500, by = 100)) +
  facet_wrap(~ age_group, axes = "all_x") + # found some cool things in the facet_wrap documentation
  labs( title = "Weekly Median Price for Center-Based Childcare ($)",
        x = "Study Year",
        y= NULL ,
        color = "California Region") +
  theme(aspect.ratio = 1,
        legend.position = "right",
        axis.text.x = element_text(size = 6),
        axis.text.y = element_text(size = 7))

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

#Lab 2 Q17

summary(aov(weight ~ species, data = surveys))

```

-   Example 2

```{r}
#| label: dsm-2-2
# Challenge 3 Q3
chisq.test(teacher_evals_compare$set_level, teacher_evals_compare$sen_level)
```

-   Example 3

```{r}
#| label: dsm-2-3


# Lab 1 Question 9
t.test(len ~ supp, data = ToothGrowth,
       alternative = "two.sided",
       var.equal = FALSE,
       conf.level = 0.95)

```

## Revising My Thinking

Throughout the course, I have revised my thinking through assignment revisions, practice assignments in class, and collaborations with peers. When receiving feedback, with a success grade or growing, I implement the changes into my all of those assignments and submit those changes with reflections. Not only that, but implement the changes in future assignments. Also, if those revisions have been still wrong, I have updated them in this portfolio as well. For example, for my example of dyplr pipeline, I revised lab 4 question 5 to implement the feedback that I didn't need to save my pipeline as a saved variable/data set if I was just outputting that table. In addition to that, I also updated my code in the practice assignments when a classmate mentioned my use of the recode function was superseded and suggested case_when() which was very helpful to revise my thinking during the collaboration process so I could implement it in my code. Overall, I tried my best to revise my code and thinking when attempting or revising my assignments so that I would have quality code at the end of the day, something I could put on my portfolio later on. I think that effort to revise allowed the code in my portfolio to be good code.

## Extending My Thinking

Throughout the course, I extended my thinking in a few ways. One big way was on the challenge assignments. I would choose more difficult challenge options or try to be creative in the questions for those assignments. For example, in challenge 4, we were to have creative freedom to form and answer a research question of our choosing based on the data set for Lab 4. In this assignment, I really wanted to dive into the data a little more and use a variety of variables to see what insights and trends were in the data. To this, I chose to use facets, colors, column text and dodge columns (that I had learned about for R for a personal project) to find relationships between age, year, and care type for median prices of childcare. In this, I was able to form a plot that was very different from those we had done in class and learn something new about this real life data set. Another big way I extended my thinking was looking into R documentation for many common functions we use in our assignments. From this, I was able to find some interesting function parameters, new functions to use, and new ways to solve similar problems. For example, in lab 4 question 7, I found some parameters for facet_wrap in the documentation to change how the axis's appeared for each box as well as how to change the x-axis scaling in order to match the plot more accurately and efficiently. These examples are present in this portfolio.

## Peer Support & Collaboration

When it came to peer support and collaboration, I found it was hard to do in college in certain classes. In this class, I think I improved my ability to collaborate in groups and teams on assignments and in feedback. In the peer reviews for assignments, I found myself giving good feedback about where they did really well and also little things they could do to make changes, In the lab 2 feedback I wrote,

"Hi! I think your lab looks great! I really liked that you included descriptive labels to all of your plots and that you have tidy code throughout your Quarto document which is great like spaces and extra lines after "+" in your code. The document looks cool, but slightly hard to read. Also your jitter plots are on top of your boxplots which make those a bit harder to see too. Overall, you did a great job on Lab 2!"

While I do have a hard time giving criticism, I thought I did good on talking about what specifically was some areas to fix. While I have other code review that I thought was more detailed, I didn't have any feedback on where they could fix their code which I think is important to highlight.

When it came to the weekly-pair activities and collaboration outside of class, I think I did good on sticking to the coding pair protocol to allow the other person to explain their thoughts while I typed and then sharing my thoughts when it was mine turn to share. But, when we both got stuck, we collaborated really well to find a solution together or ask questions for some hints on where to find the solution. Outside of class, I made time in my schedule to work with peers in a study group way so that if we got stuck, we had ways to share ideas. I think this is the most I have worked outside of class (optionally) with peers which was an improvement for me. Overall, I feel I really improved on my collaboration skills and being able to give feedback to peers.
